//@input Asset.VoiceMLModule vmlModule {"label": "Voice ML Module"}
//@input SceneObject transcriptionText  // Reference to the 3D Text object

// Create the options for VoiceML
var options = VoiceML.ListeningOptions.create();
options.continuous = true;  // Set continuous listening mode
options.speechRecognizer = VoiceMLModule.SpeechRecognizer.Default;  // Default speech recognizer
options.languageCode = 'en_US';  // Set to English language
options.shouldReturnAsrTranscription = true;  // Enable transcription results
options.shouldReturnInterimAsrTranscription = true;  // Enable interim transcription

// List of keywords to detect
var keywords = ["fireball", "confusion"];

// Handler when voice listening starts
var onListeningEnabledHandler = function () {
    print("Voice listening and transcription started...");
    script.vmlModule.startListening(options);
};

// Handler when voice listening stops
var onListeningDisabledHandler = function () {
    print("Voice listening stopped.");
    script.vmlModule.stopListening();
};

// Event handler for transcription updates (recognized speech)
var onUpdateListeningEventHandler = function (eventArgs) {
    var transcription = eventArgs.transcription.trim().toLowerCase();  // Get the transcription and convert to lowercase
    if (transcription === "") {
        return;
    }

    // Check if any keyword is present in the transcription
    var foundKeyword = null;
    for (var i = 0; i < keywords.length; i++) {
        if (transcription.includes(keywords[i])) {
            foundKeyword = keywords[i];
            break;
        }
    }

    if (foundKeyword) {
        // Update the 3D Text object with the detected keyword
        if (script.transcriptionText) {
            var textComponent = script.transcriptionText.getFirstComponent("Component.Text3D");
            if (textComponent) {
                textComponent.text = foundKeyword;  // Display the detected keyword
            }
        }
        print("Keyword Detected: " + foundKeyword);
    }

    if (eventArgs.isFinalTranscription) {
        print("Final Transcription: " + transcription);
    }
};

// Event handler for errors
var onListeningErrorHandler = function (eventErrorArgs) {
    print('Error: ' + eventErrorArgs.error + ' Description: ' + eventErrorArgs.description);
};

// Register event listeners
script.vmlModule.onListeningUpdate.add(onUpdateListeningEventHandler);
script.vmlModule.onListeningError.add(onListeningErrorHandler);
script.vmlModule.onListeningEnabled.add(onListeningEnabledHandler);
script.vmlModule.onListeningDisabled.add(onListeningDisabledHandler);

// Start listening when the script is initialized
script.vmlModule.startListening(options);

print("VoiceML transcription script initialized. Waiting for voice...");
